data3 <- read.table("txttest.txt", header = TRUE, sep = "\t")
data3
class(data3)
data1 <- read.csv("HappinessLevel.csv")
data1
data2 <- read_xlsx("datasample.xlsx", col_names = T)
data2
#txt
data3 <- read.table("txttest.txt", header = TRUE, sep = "\t")#不用加载包
data3
class(data3)
class(data3)
#sapply lapply
sapply(1:3, function(x) x^2)
lapply(1:3, function(x) x^2)
sapply(1:3, function(x) mean(m[,x]))
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(x = iris$Petal.Length, index = iris$Species, function = mean)
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(x = iris$Petal.Length, index = iris$Species, function = mean)
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(x = iris$Petal.Length, index = iris$Species, function = mean)
iris
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(X = iris$Petal.Length, IMDEX = iris$Species, FUN = mean)
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(iris$Petal.Length,iris$Species, FUN = mean)
#tapply
#计算不同品种的鸢尾花的花瓣长度的均值
tapply(iris$Petal.Length,iris$Species, FUN = mean)
##日期变量
dates <- c("21/02/2023","22/02/2023")
###将字符串形式的日期值转换为日期变量
as.Date(dates,"%d/%m/%Y")
###创建字符型日期时间变量
x <- c("2023-02-21 10:17:20","2023-02-22 18:17:00")
is.character(x)
###将字符串转化为包含时间及时区的日期变量
X <- as.POSIXlt(x,tz = "","%Y-%m-%d %H:%M:%S")
X
###将日期变量转换成指定格式的字符型变量
strftime(X,format = "%Y/%m/%d")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
1:15
getwd()
nuii <- 5
nuii <6
Sys.Date()
Sys.time()
Sys.time()
dates <- c("21/02/2023","22/02/2023")
dates
as.Date(dates,"%d/%m/%Y")
formated.dates <- as.Date(dates,"%d/%m/%Y")
formated.dates
formated.dates[2]
formated.dates[1]
formated.dates[2] - formated.dates[1]
formated.dates[2] - formated.dates[1]
x <- c("2023-02-21 10:17:20","2023-02-22 18:17:00")
is.character(x)
X <- as.POSIXlt(x,tz = "","%Y-%m-%d %H:%M:%S")
X
X
X【2
X[2] - X[1]
test.time <- c("2023-02-21 10:17:20","2023-02-22 18:17:00")
is.character(test.time)
formated.test.time <- as.POSIXlt(test.time,tz = "","%Y-%m-%d %H:%M:%S")
formated.test.time
formated.test.time[2] - formated.test.time[1]
strftime(X,format = "%Y/%m/%d")
df.created <- data.frame(c1=letters[1:3],c2=1:3,c3=c(1,-1,3),stringsAsFactors = F)
df.created
sapply(df.created,mode)
data(package = 'datasets')#查看内置数据集
rivers
rivers
euro #元素有命名
euro1 <- c(13,40,1.9,166,5.9,6.55,0.78,1936,40,2,200)
euro1
names(euro1) <- c("a","b","c","d","e","f","g","h","i","j","k")
euro1
euro.cross
freeny.x
Titanic
airquality
beaver1
state.division
state.region
state.center
airquality
beaver1
runif(10, min = 0, max= 1)
runif(10, min = 0, max= 1)
runif(10, min = 0, max= 1)
runif(10, min = 0, max= 1)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
set.seed(200)
runif(10, min = 0, max= 1)
a[-(1:5)]#去除不访问的连续元素
a <- 10:20
a[1]
a[2:4]#访问多个连续元素
a[c(3,5,7)]#访问多个不连续元素
a[-(1:5)]#去除不访问的连续元素
a
which(a == 12)
which(a >= 16 & a <=19)
a[which.max(a)]#返回向量最大值
a
subset(a,a >= 13 & a <=17)
help("subset")
x <- 1:6
x <- c(x,c(7:9));x#扩展
x <- x[-1];x#删除单个元素
x <- x[-c(2:4)];x
x1 <- c(4,5,6,2,5,9)
x2 <- c("e","b","c")
x3 <- c(3,4,NA,3,5,7)
sort(x1,decreasing = FALSE)#升序
sort(x1,decreasing = TRUE)#降序
sort(x2)#字符型升序
sort(x3,na.last = TRUE)#将缺失值放置末尾
rev(x1)#倒序
m <- matrix(1:12, 4, byrow = F);m
m <- matrix(1:12, 4, byrow = T);m
y <- -1:2
y
m;y
m.new <- m + y
m.new
x <- c(3,-1,2,0,-3,6)
x.mat <- matrix(x,ncol=2)		#Matrix with 2 cols
x.mat
x.mat[c(1,3),] #1st and 3rd lines
x.mat[-2,] # No 2nd line
x <- c("a", "b", "c", "d", "e", "f", "g", "h")
x[1]
x[3:6]
x <- c(1:10)
a <- matrix(x,ncol = 2, nrow = 5, byrow = F);a
b <- as.vector(a);b
x.mat
dim(x.mat)  #Dimension
t(x.mat) #Transpose
x.mat %*% t(x.mat) #Multiplication
v1 <- c(5,9,3)
v2 <- c(0,1,2,3,4,5)
result <- array(c(v1,v2),dim = c(3,3,2))
result
c(v1,v2)
x.mat %o% t(x.mat) #Multiplication
f1<-factor(1:3); f1;
f2<-factor(1:3,level=1:5); f2; #five levels
f3<-factor(rep(1:3,5)); f3;
f4<-factor(c(3,5),level=1:5); f4
sex = factor(c('f','m','f','f','m'),levels = c('f','m'),labels = c('female','male'),ordered = TRUE)
sex
gl(3, 5)  #generate a group of factor values, this variable has three levels, each level repeats five times
gl(3,5,label=c("a","b","c") ) # same with the previous. Level names: a, b, c
gl(3,5,length=30)
gl(2,10)
gl(2,1,length=20)
fruits <- c("apple", "banana", "orange", "apple", "orange")
fruit_factor <- factor(fruits)
attributes(fruit_factor)
levels(fruit_factor) <- c("orange", "apple", "banana")
attributes(fruit_factor)
airquality
reg(Ozone ~ Solar.R + Wind + Temp + Month,data=airquality)
lm(Ozone ~ Solar.R + Wind + Temp + Month,data=airquality)
result1 <- lm(Ozone ~ Solar.R + Wind + Temp + Month,data=airquality)
summary(result1)
result2 <- lm(Ozone ~ Solar.R + Wind + Temp + as.factor(Month),data=airquality)
summary(result2)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
stdata1 <- read.csv("datasample.csv",
header=T )
a <- rep(1,20)
b <- rep(2,10)
c <- c(a,b)
c(1,3,4,NA,5,6)
data2 <- read.table("datasample.csv"
,header=T, sep=",")
library(readxl)
data3 <- read_excel("datasample.xlsx", sheet = "data1")
excel_sheets("datasample.xlsx")
x<-1:4 ; n<-10; M<-c(10,35); y<-2:4
data.frame(x,n)
data.frame(x,M)
data.frame(x,y)
z<-c("a","b","c","d")
data.frame(x,n,row.names=z)
KMS <- read.csv("KMS305.csv",
header=T)
library(psych)
library(psych)
describe(KMS)
#Access column, add new column
KMS$Flow1
KMS$NR <- (KMS$NR1 + KMS$NR2 + KMS$NR3)/3
class(KMS$NR1)
class(KMS)
library(Hmisc)
label(KMSconstructs3.sub$NR1) <- "Normal Resolution Item1"
label(KMSconstructs3.sub$NR2) <- "Normal Resolution Item2"
label(KMSconstructs3.sub$NR3) <- "Normal Resolution Item3"
describe(KMSconstructs3.sub)
result <- lm(KMS$FrequencyRead~KMS$FrequencyPost)
summary(result)
plot(result)
library("tidyr")
GDP <- data.frame(province = c("上海", "江苏", "浙江"), x2016 = c(28168, 77388, 47251), x2017 = c(30632, 85869, 51768), x2018 = c(32679, 92595, 56197)) #数据准备
GDP
GDP.g <- pivot_longer(GDP, names_to = "year", values_to = "data", -province) #GDP数据框中province列不动，其他旧变量名成为year的观测值，旧观测值相对应成为data的观测值
GDP.g
?pivot_longer
GDP.s <- pivot_wider(GDP.g, names_from = "year",values_from = "data") #将原year的观测值作为新变量名，原data的观测值相对应地分散至各新变量下
GDP.s
GDP.s <- pivot_wider(GDP.g, names_from = "yar",values_from = "ata") #将原year的观测值作为新变量名，原data的观测值相对应地分散至各新变量下
GDP.s <- pivot_wider(GDP.g, names_from = "year",values_from = "data") #将原year的观测值作为新变量名，原data的观测值相对应地分散至各新变量下
GDP.s
data <- data.frame(event = c("a", "b", "c"), hour = c(11, 19, 22), minute = c(12, 52, 30), second = c(33, 10, 59)) #数据准备
pivot_longer(GDP, names_to = "year", values_to = "data")
pivot_longer(GDP, names_to = "year", values_to = "data",-province)
dat <- tribble(
~group,  ~BP,  ~HS,  ~BB, ~lowerBP, ~upperBP, ~lowerHS, ~upperHS, ~lowerBB, ~upperBB,
"1", 0.51, 0.15, 0.05,     0.16,     0.18,      0.5,     0.52,     0.14,     0.16,
"2.1", 0.67, 0.09, 0.06,     0.09,     0.11,     0.66,     0.68,     0.08,      0.1,
"2.2", 0.36, 0.13, 0.07,     0.12,     0.15,     0.34,     0.38,     0.12,     0.14,
"2.3", 0.09, 0.17, 0.09,     0.13,     0.16,     0.08,     0.11,     0.15,     0.18,
"2.4", 0.68, 0.12, 0.07,     0.12,     0.14,     0.66,     0.69,     0.11,     0.13,
"3", 0.53, 0.15, 0.06,     0.14,     0.16,     0.52,     0.53,     0.15,     0.16)
longer<-pivot_longer(dat, cols=-1, names_pattern = "(.*)(..)$", names_to = c("limit", "name")) %>%
mutate(limit=ifelse(limit=="", "value", limit))
relig_income
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
f1<-factor(1:3); f1;
f1[1]
f1[2]
f1[2] - f1[1]
f2<-factor(1:3,level=1:5); f2; #five levels
f2
f3<-factor(rep(1:3,5)); f3;
f4<-factor(c(3,5),level=1:5); f4
sex = factor(c('f','m','f','f','m'),levels = c('f','m'),labels = c('female','male'),ordered = TRUE)
sex
sex
gl(3, 5)  #generate a group of factor values, this variable has three levels, each level repeats five times
gl(3,5,label=c("a","b","c") ) # same with the previous. Level names: a, b, c
fruits <- c("apple", "banana", "orange", "apple", "orange")
fruit_factor <- factor(fruits)
attributes(fruit_factor)
fruits
fruit_factor
fruits <- c("apple", "banana", "orange", "apple", "orange")
fruit_factor <- factor(fruits)
attributes(fruit_factor)
ordered_fruit_factor <- factor(fruits, levels = c("apple", "banana", "orange"), ordered = TRUE)
sorted_fruit_factor <- sort(ordered_fruit_factor)
sorted_fruit_factor
numeric_fruit_factor <- as.numeric(ordered_fruit_factor)
class(numeric_fruit_factor)
numeric_fruit_factor
ordered_fruit_factor
Indicator
data(package = 'datasets')#查看内置数据集
Harman23.cor
ChickWeight
ChickWeight
ChickWeight$Diet
ChickWeight$Diet <- as.numeric( ChickWeight$Diet)
ChickWeight$Diet
summary(lm(weight~Time+Diet,data=ChickWeight))
summary(lm(weight~Time+as.factor(Diet),data=ChickWeight))
airquality
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)       # df is a data frame
stdata1 <- read.csv("datasample.csv",
header=T )
getwd()
stdata1
library(readxl)
readxl::excel_sheets("datasample.xlsx")
data3 <- read_excel("datasample.xlsx", sheet = "data1")
KMS <- read.csv("KMS305.csv",
header=T)
str(KMS)
head(KMS,10)
head(KMS,7)
summary(KMS)
dim(KMS)
nrow(KMS)
ncol(KMS)
library(psych)
describe(KMS)
write(describe(KMS),file =
"resulr.csv")
write(unlist(describe(KMS)),file =
"resulr.csv")
KMS$NR <- (KMS$NR1 + KMS$NR2 + KMS$NR3)/3
head(KMS)
class(KMS$NR1)
class(KMS)
V1 <- c("NR1","NR2","NR3","ITR1","ITR2","ITR3","KSSE1","KSSE2","KSSE3")
KMSconstructs3 <- KMS[,V1]
read.csv()
read.csv
boxplot(count ~ spray, data = InsectSprays)
par(mfrow=c(1,2))
boxplot(count ~ spray, data = InsectSprays)
boxplot(count ~ spray, data = InsectSprays, col = "red")
par(mfrow=c(2,2))
boxplot(count ~ spray, data = InsectSprays)
sds <- c(23,232,434,NA,234)
mean(sds)
mean(sds,na.rm = T)
a = c(175, 168, 168, 190, 156, 181, 182, 175, 174, 179)
b = c(185, 169, 173, 173, 188, 186, 175, 174, 179, 180)
summary(lm(a~b))
#evaluate the sample variances of the two groups, using a Fisher’s F-test to verify the homoskedasticity (homogeneity of variances).
var.test(a,b) #p > 0.05. two variances are homogeneous.
t.test(a,b, var.equal=TRUE, paired=FALSE)
#conclude that the averages of two groups are significantly similar.
height <- c(2, 4, 3, 2, 4, 7, 7, 2, 5, 4, 5, 6, 8, 5, 10,  7, 12, 6, 6,7,11,6, 6, 7, 9, 5, 10, 6, 3, 10,
rep(10,10))
type <- c(rep(1,10),rep(2,9),rep(3,11),rep(4,10))
bac <- data.frame(height,type)
bac
bac$type
bac$type<-as.factor(bac$type) #class(bac$type)
bac$type
dd<- lm(height~type, data=bac)
summary(dd)
ba.an<-aov(dd)
summary(ba.an)
summary(ba.an)
KMS <- read.csv("KMS305.csv",
header=T)
KMS <- read.csv("KMS305.csv",
header=T)
GetDistribution <- function(df){
variable.No <- ncol(df) #calculates number of columns in data.frame
for(i in 1:variable.No){
hist(df[,i]) #get hist for each column
}
}
GetDistribution(KMS)
paste("lele ","kang")
paste("lele","kang")
GetDistribution2 <- function(df){
variable.No <- ncol(df) #calculates number of columns in data.frame
for(i in 1:variable.No){
TmpFileName <- paste("PlotHistFigures/",i,"-",colnames(df)[i],".png",sep="")
png(file=TmpFileName)
hist(df[,i]) #get hist for each column
dev.off()
}
}
GetDistribution2(KMS)
library(readxl)
?readxl
library(dplyr)
library(nycflights13)
head(flights)
tbl_df(flights)
filter(flights, month == 1, day == 1)
filter(flights, month == 1 | month == 2)
filter(flights, month > 6)
arrange(flights, year, desc(month), day)#
df.tmp <- arrange(flights, desc(arr_delay))
write.csv(df.tmp[1:100,],"testtttt.csv")
df.tmp
select(flights, year, month, day)
select(flights, year:day)
distinct(select(flights, origin, dest))
?select()
mutate(flights,gain = arr_delay - dep_delay, speed = distance/air_time * 60)
transmute(flights,
gain = arr_delay - dep_delay,
gain_per_hour = gain / (air_time / 60)
)
summarise(flights,
delay = mean(dep_delay,na.rm = T))
library(nycflights13)
dim(nycflights13)
dim(flights)
by_tailnum <- group_by(flights, tailnum)
delay <- summarise(by_tailnum,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay
arrange(delay,desc(count))
problem.DF <- select(flights, arr_delay, distance)
problem.DF
hist(problem.DF$arr_delay)
hist(problem.DF$distance)
png("test.png")
plot(problem.DF$distance,problem.DF$arr_delay)
dev.off()
cor(problem.DF$distance,problem.DF$arr_delay) # result is NA, why?
cor(problem.DF, method = "pearson", use = "complete")
cor.test(problem.DF$distance,problem.DF$arr_delay)
summary(lm(problem.DF$distance~problem.DF$arr_delay))
flights <- mutate(flights,DelayedYes = ifelse( dep_delay > 0,1,0))
head(flights[20,c("dep_delay","DelayedYes")])
flights <- mutate(flights,airspeed = distance/air_time)
t.test(airspeed ~ DelayedYes, data=flights)
test <- c(32,2332,32,32)
test
test2 <- c(32,2332,"32",32)
test2
test2[3]
test3<- c(T,F,T,F)
Mydata <- c(2,34,3.5,-1,-78)
Mydata
class(Mydata)
Mydata > 0  # Test on elements
Mydata[Mydata > 0] # Extract the positive elments
Mydata[c(T,T,T,F,F)]
Mydata[-c(1,3)] # Remove elements
x <- c(5,-2,3,-7)
x
y <- c(1,2,3,4) * 10 #Operation on all the elements
y
x * 10
y
sort(x) #Soring a vector
order(x) #Element order for sorting
y[order(x)] #Operation on all the components
order(x)
order(x)
y
y[c(4,2,3,1)]
rev(x) #Reverse a vector
m <- matrix(1:12, 4, byrow = F); m
m <- matrix(1:12, 4, byrow = T); m
?seq
seq(2,20,2)
seq(2,20,2)
m <- matrix(seq(2,20,2), 2, byrow = T); m
y <- -1:2; m;y
y <- -1:2
y
m.new <- m + y; m.new
m.new
m <- matrix(1:12, 4, byrow = F); m
y <- -1:2; m;y
m.new <- m + y; m.new
x <- c(1, 2, 3, NA)
x
x+3
x+120
Log(c(0,1,2))
log(c(0,1,2))
0/0
NA
NaN
x <- c("a", "b", "c", "d", "e", "f", "g", "h")
x[1]; x[3:5]; x[-(3:5)]
x[-c(3:5)]
x[c(T, F, T, F, T, F, T, F)]
x <= "d"
x[x <= "d"]
a<-c("China", "Korea", "Japan", "UK", "USA", "France", "India", "Russia") #character vector
y <- matrix(c(seq(from=3, to=30, by=3 )),nrow=2,byrow=T)
a
y
my.list <- list(name="Fred", mynumbers=a, mymatrix=y, age=5.3)
my.list
my.list[[1]]
my.list$mymatrix
?list
my.list$fd <- "cfsdf"
my.list
my.list$fd <- NULL
my.list
knitr::opts_chunk$set(echo = TRUE)
yy <- c(32,32,32)
yy
aa <- matrix(1:12,3,4)
aa
